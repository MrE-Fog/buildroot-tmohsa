Note for TMOHS1:
  - this is for building executables that run on the existing firmware
  - don't try to boot any rootfs or kernel generated from this tool
  - only tested on my device, not responsible for damage to devices

Setup:
  - make tmohs1_defconfig

Build:
  - make
  - ./maketar.sh

Install on device:
  - remount root rw (mount -o remount,rw /)
  - run ftpd (tcpsvd -vE 0.0.0.0 21 /sbin/ftpd -w -vv /tmp)
  - upload files.tgz to / via FTP
  - Ctrl-C on the ftpd to close it
  - Unarchive (tar -zxvpf /tmp/files.tgz -C /)

Enable SSH:
  - ln -s /etc/init.d/S50dropbear /etc/rc5.d/S50dropbear

Remove from device:
  - upload files.tgz to / via FTP (see above)
  - Run on device: for f in $(tar -ztf /tmp/files.tgz); do rm -rfv "/${f}"; done
  - Relink libssl.so to older libssl.so.1.0.0: cd /usr/lib && ln -s libssl.so.1.0.0 libssl.so
  - Reboot device

-----------

Buildroot is a simple, efficient and easy-to-use tool to generate embedded
Linux systems through cross-compilation.

The documentation can be found in docs/manual. You can generate a text
document with 'make manual-text' and read output/docs/manual/manual.text.
Online documentation can be found at http://buildroot.org/docs.html

To build and use the buildroot stuff, do the following:

1) run 'make menuconfig'
2) select the target architecture and the packages you wish to compile
3) run 'make'
4) wait while it compiles
5) find the kernel, bootloader, root filesystem, etc. in output/images

You do not need to be root to build or run buildroot.  Have fun!

Buildroot comes with a basic configuration for a number of boards. Run
'make list-defconfigs' to view the list of provided configurations.

Please feed suggestions, bug reports, insults, and bribes back to the
buildroot mailing list: buildroot@buildroot.org
You can also find us on #buildroot on Freenode IRC.

If you would like to contribute patches, please read
https://buildroot.org/manual.html#submitting-patches
